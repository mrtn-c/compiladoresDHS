# Generated from compiladores.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,40,282,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
        1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
        1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,
        1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,
        1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
        1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,3,27,166,8,27,1,28,1,28,1,28,1,29,1,29,1,29,
        1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,36,
        1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,4,38,223,8,38,
        11,38,12,38,224,1,38,1,38,4,38,229,8,38,11,38,12,38,230,1,38,4,38,
        234,8,38,11,38,12,38,235,1,38,1,38,4,38,240,8,38,11,38,12,38,241,
        1,38,1,38,4,38,246,8,38,11,38,12,38,247,1,38,1,38,4,38,252,8,38,
        11,38,12,38,253,3,38,256,8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,40,1,40,3,40,267,8,40,1,40,1,40,1,40,3,40,272,8,40,5,40,274,8,
        40,10,40,12,40,277,9,40,1,41,1,41,1,41,1,41,0,0,42,1,0,3,0,5,1,7,
        2,9,3,11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,11,27,12,29,13,31,14,
        33,15,35,16,37,17,39,18,41,19,43,20,45,21,47,22,49,23,51,24,53,25,
        55,26,57,27,59,28,61,29,63,30,65,31,67,32,69,33,71,34,73,35,75,36,
        77,37,79,38,81,39,83,40,1,0,3,2,0,65,90,97,122,1,0,48,57,3,0,9,10,
        13,13,32,32,293,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,
        0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
        0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,
        0,83,1,0,0,0,1,85,1,0,0,0,3,87,1,0,0,0,5,89,1,0,0,0,7,91,1,0,0,0,
        9,93,1,0,0,0,11,95,1,0,0,0,13,97,1,0,0,0,15,99,1,0,0,0,17,101,1,
        0,0,0,19,103,1,0,0,0,21,105,1,0,0,0,23,107,1,0,0,0,25,109,1,0,0,
        0,27,111,1,0,0,0,29,113,1,0,0,0,31,116,1,0,0,0,33,119,1,0,0,0,35,
        121,1,0,0,0,37,123,1,0,0,0,39,126,1,0,0,0,41,129,1,0,0,0,43,132,
        1,0,0,0,45,135,1,0,0,0,47,138,1,0,0,0,49,141,1,0,0,0,51,145,1,0,
        0,0,53,151,1,0,0,0,55,165,1,0,0,0,57,167,1,0,0,0,59,170,1,0,0,0,
        61,175,1,0,0,0,63,183,1,0,0,0,65,190,1,0,0,0,67,195,1,0,0,0,69,203,
        1,0,0,0,71,209,1,0,0,0,73,211,1,0,0,0,75,217,1,0,0,0,77,255,1,0,
        0,0,79,257,1,0,0,0,81,266,1,0,0,0,83,278,1,0,0,0,85,86,7,0,0,0,86,
        2,1,0,0,0,87,88,7,1,0,0,88,4,1,0,0,0,89,90,5,40,0,0,90,6,1,0,0,0,
        91,92,5,41,0,0,92,8,1,0,0,0,93,94,5,123,0,0,94,10,1,0,0,0,95,96,
        5,125,0,0,96,12,1,0,0,0,97,98,5,59,0,0,98,14,1,0,0,0,99,100,5,44,
        0,0,100,16,1,0,0,0,101,102,5,61,0,0,102,18,1,0,0,0,103,104,5,46,
        0,0,104,20,1,0,0,0,105,106,5,43,0,0,106,22,1,0,0,0,107,108,5,42,
        0,0,108,24,1,0,0,0,109,110,5,45,0,0,110,26,1,0,0,0,111,112,5,47,
        0,0,112,28,1,0,0,0,113,114,5,43,0,0,114,115,5,43,0,0,115,30,1,0,
        0,0,116,117,5,45,0,0,117,118,5,45,0,0,118,32,1,0,0,0,119,120,5,60,
        0,0,120,34,1,0,0,0,121,122,5,62,0,0,122,36,1,0,0,0,123,124,5,61,
        0,0,124,125,5,61,0,0,125,38,1,0,0,0,126,127,5,33,0,0,127,128,5,61,
        0,0,128,40,1,0,0,0,129,130,5,62,0,0,130,131,5,61,0,0,131,42,1,0,
        0,0,132,133,5,60,0,0,133,134,5,61,0,0,134,44,1,0,0,0,135,136,5,38,
        0,0,136,137,5,38,0,0,137,46,1,0,0,0,138,139,5,124,0,0,139,140,5,
        124,0,0,140,48,1,0,0,0,141,142,5,105,0,0,142,143,5,110,0,0,143,144,
        5,116,0,0,144,50,1,0,0,0,145,146,5,102,0,0,146,147,5,108,0,0,147,
        148,5,111,0,0,148,149,5,97,0,0,149,150,5,116,0,0,150,52,1,0,0,0,
        151,152,5,98,0,0,152,153,5,111,0,0,153,154,5,111,0,0,154,155,5,108,
        0,0,155,54,1,0,0,0,156,157,5,116,0,0,157,158,5,114,0,0,158,159,5,
        117,0,0,159,166,5,101,0,0,160,161,5,102,0,0,161,162,5,97,0,0,162,
        163,5,108,0,0,163,164,5,115,0,0,164,166,5,101,0,0,165,156,1,0,0,
        0,165,160,1,0,0,0,166,56,1,0,0,0,167,168,5,105,0,0,168,169,5,102,
        0,0,169,58,1,0,0,0,170,171,5,101,0,0,171,172,5,108,0,0,172,173,5,
        115,0,0,173,174,5,101,0,0,174,60,1,0,0,0,175,176,5,101,0,0,176,177,
        5,108,0,0,177,178,5,115,0,0,178,179,5,101,0,0,179,180,5,32,0,0,180,
        181,5,105,0,0,181,182,5,102,0,0,182,62,1,0,0,0,183,184,5,115,0,0,
        184,185,5,119,0,0,185,186,5,105,0,0,186,187,5,116,0,0,187,188,5,
        99,0,0,188,189,5,104,0,0,189,64,1,0,0,0,190,191,5,99,0,0,191,192,
        5,97,0,0,192,193,5,115,0,0,193,194,5,101,0,0,194,66,1,0,0,0,195,
        196,5,100,0,0,196,197,5,101,0,0,197,198,5,102,0,0,198,199,5,97,0,
        0,199,200,5,117,0,0,200,201,5,108,0,0,201,202,5,116,0,0,202,68,1,
        0,0,0,203,204,5,98,0,0,204,205,5,114,0,0,205,206,5,101,0,0,206,207,
        5,97,0,0,207,208,5,107,0,0,208,70,1,0,0,0,209,210,5,58,0,0,210,72,
        1,0,0,0,211,212,5,119,0,0,212,213,5,104,0,0,213,214,5,105,0,0,214,
        215,5,108,0,0,215,216,5,101,0,0,216,74,1,0,0,0,217,218,5,102,0,0,
        218,219,5,111,0,0,219,220,5,114,0,0,220,76,1,0,0,0,221,223,3,3,1,
        0,222,221,1,0,0,0,223,224,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,
        0,225,256,1,0,0,0,226,228,5,45,0,0,227,229,3,3,1,0,228,227,1,0,0,
        0,229,230,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,256,1,0,0,
        0,232,234,3,3,1,0,233,232,1,0,0,0,234,235,1,0,0,0,235,233,1,0,0,
        0,235,236,1,0,0,0,236,237,1,0,0,0,237,239,3,19,9,0,238,240,3,3,1,
        0,239,238,1,0,0,0,240,241,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,
        0,242,256,1,0,0,0,243,245,5,45,0,0,244,246,3,3,1,0,245,244,1,0,0,
        0,246,247,1,0,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,249,1,0,0,
        0,249,251,3,19,9,0,250,252,3,3,1,0,251,250,1,0,0,0,252,253,1,0,0,
        0,253,251,1,0,0,0,253,254,1,0,0,0,254,256,1,0,0,0,255,222,1,0,0,
        0,255,226,1,0,0,0,255,233,1,0,0,0,255,243,1,0,0,0,256,78,1,0,0,0,
        257,258,5,114,0,0,258,259,5,101,0,0,259,260,5,116,0,0,260,261,5,
        117,0,0,261,262,5,114,0,0,262,263,5,110,0,0,263,80,1,0,0,0,264,267,
        3,1,0,0,265,267,5,95,0,0,266,264,1,0,0,0,266,265,1,0,0,0,267,275,
        1,0,0,0,268,272,3,1,0,0,269,272,3,3,1,0,270,272,5,95,0,0,271,268,
        1,0,0,0,271,269,1,0,0,0,271,270,1,0,0,0,272,274,1,0,0,0,273,271,
        1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,82,1,
        0,0,0,277,275,1,0,0,0,278,279,7,2,0,0,279,280,1,0,0,0,280,281,6,
        41,0,0,281,84,1,0,0,0,12,0,165,224,230,235,241,247,253,255,266,271,
        275,1,6,0,0
    ]

class compiladoresLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PA = 1
    PC = 2
    LA = 3
    LC = 4
    PYC = 5
    COMA = 6
    ASSIG = 7
    PUNTO = 8
    SUMA = 9
    MULT = 10
    REST = 11
    DIV = 12
    INCREMENTO = 13
    DECREMENTO = 14
    MENOR = 15
    MAYOR = 16
    IGUALDAD = 17
    DISTINTO = 18
    MAYORIGUAL = 19
    MENORIGUAL = 20
    AND = 21
    OR = 22
    INT = 23
    FLOAT = 24
    BOOL = 25
    TOF = 26
    IIF = 27
    IELSE = 28
    IELSEIF = 29
    ISWITCH = 30
    CASE = 31
    DEFAULT = 32
    BREAK = 33
    DP = 34
    IWHILE = 35
    IFOR = 36
    NUMERO = 37
    RETORNO = 38
    ID = 39
    WS = 40

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "';'", "','", "'='", "'.'", "'+'", 
            "'*'", "'-'", "'/'", "'++'", "'--'", "'<'", "'>'", "'=='", "'!='", 
            "'>='", "'<='", "'&&'", "'||'", "'int'", "'float'", "'bool'", 
            "'if'", "'else'", "'else if'", "'switch'", "'case'", "'default'", 
            "'break'", "':'", "'while'", "'for'", "'return'" ]

    symbolicNames = [ "<INVALID>",
            "PA", "PC", "LA", "LC", "PYC", "COMA", "ASSIG", "PUNTO", "SUMA", 
            "MULT", "REST", "DIV", "INCREMENTO", "DECREMENTO", "MENOR", 
            "MAYOR", "IGUALDAD", "DISTINTO", "MAYORIGUAL", "MENORIGUAL", 
            "AND", "OR", "INT", "FLOAT", "BOOL", "TOF", "IIF", "IELSE", 
            "IELSEIF", "ISWITCH", "CASE", "DEFAULT", "BREAK", "DP", "IWHILE", 
            "IFOR", "NUMERO", "RETORNO", "ID", "WS" ]

    ruleNames = [ "LETRA", "DIGITO", "PA", "PC", "LA", "LC", "PYC", "COMA", 
                  "ASSIG", "PUNTO", "SUMA", "MULT", "REST", "DIV", "INCREMENTO", 
                  "DECREMENTO", "MENOR", "MAYOR", "IGUALDAD", "DISTINTO", 
                  "MAYORIGUAL", "MENORIGUAL", "AND", "OR", "INT", "FLOAT", 
                  "BOOL", "TOF", "IIF", "IELSE", "IELSEIF", "ISWITCH", "CASE", 
                  "DEFAULT", "BREAK", "DP", "IWHILE", "IFOR", "NUMERO", 
                  "RETORNO", "ID", "WS" ]

    grammarFileName = "compiladores.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


